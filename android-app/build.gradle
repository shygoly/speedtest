plugins {
    id 'com.android.application'
    id 'com.google.firebase.appdistribution'
}

android {
    namespace 'com.swiftest.app'
    compileSdk rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.swiftest.speedtest"
        minSdk rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
        }
        debug {
            minifyEnabled false
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    
    buildFeatures {
        viewBinding true
    }
}

// Firebase App Distribution configuration via environment variables
firebaseAppDistribution {
    // Path to service account JSON file (set in CI)
    def creds = System.getenv('FIREBASE_CREDENTIALS')
    if (creds != null && !creds.trim().isEmpty()) {
        serviceCredentialsFile = creds
    }
    // Firebase Android App ID (e.g., 1:1234567890:android:abcdef123456)
    def appIdEnv = System.getenv('FIREBASE_APP_ID')
    if (appIdEnv != null && !appIdEnv.trim().isEmpty()) {
        appId = appIdEnv
    }
    // Optional testers or groups
    def testersEnv = System.getenv('FIREBASE_TESTERS')
    if (testersEnv != null && !testersEnv.trim().isEmpty()) {
        testers = testersEnv
    }
    def groupsEnv = System.getenv('FIREBASE_GROUPS')
    if (groupsEnv != null && !groupsEnv.trim().isEmpty()) {
        groups = groupsEnv
    }
    // Optional release notes
    def notes = System.getenv('FIREBASE_RELEASE_NOTES')
    if (notes != null && !notes.trim().isEmpty()) {
        releaseNotes = notes
    }
}

dependencies {
    // Core module dependency
    implementation project(':core')
    
    // Android UI components
    implementation "androidx.appcompat:appcompat:${rootProject.ext.androidxAppCompatVersion}"
    implementation "com.google.android.material:material:${rootProject.ext.materialVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraintLayoutVersion}"
    
    // Chart library for speed visualization
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    
    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.6.2'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.6.2'
    
    // Navigation
    implementation 'androidx.navigation:navigation-fragment:2.7.4'
    implementation 'androidx.navigation:navigation-ui:2.7.4'
    
    // Testing
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
}